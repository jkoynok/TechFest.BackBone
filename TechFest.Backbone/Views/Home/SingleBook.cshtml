@model TechFest.Backbone.Models.Book

@{
    ViewBag.Title = "SingleBook";
}

<h2>SingleBook</h2>
<ul id='books'>

</ul>

<div id='msg'></div>
<script type="text/javascript">

var tf = tf || {};

$(document).ready(function() {

    //bootstrap in some server data
    tf.rawmodel = @Html.Raw(Json.Encode(Model)); 
    
    //create a bb Book Model
    tf.BookModel = Backbone.Model.extend({
        IncrementLikes: function() {
            this.set({ Likes : this.get('Likes') + 1});    
        },
        IncrementLikes: function() {
            this.set({ Likes : this.get('Likes') + 1});
        },
        url : '/'
    });

    //convert raw data to a backbone model
    tf.bookModel = new tf.BookModel(tf.rawmodel);

    //create the BookView prototype (class)    
    tf.BookView = Backbone.View.extend({
            tagName: 'li',
            events: { 
              'click' : 'like'        
             },
             like: function() {
                //increment the likes
                this.model.IncrementLikes();           
                this.render();
             },
             render: function() {               
                this.$el.html(this.model.get('Title') + '(' + this.model.get('Likes') + ' likes)');
                return this;
             }
    });

    //new up a new BookView instance with our model
    tf.bookView = new tf.BookView({model : tf.bookModel});
    //the view is entirely virtual until added to the dom
    $('#books').append(tf.bookView.render().el);

    //it is an object that exposes bb events
//    tf.bookModel.on('change', function(x) {
//        $('#msg').html('it has ' + this.get('Likes') + ' likes');
//    });

});

//so what?

</script>
<script type='text/html' id='bookTemplate'>
    <li class='book'>{title} - ({Likes} likes)</li>
</script>